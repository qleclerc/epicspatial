% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_mult.R
\name{fit_mult}
\alias{fit_mult}
\title{Fits the incidence from one resolution to another via a multiplier}
\usage{
fit_mult(fit_data, spatial_data, beta, sigma = 1/2.6, interval = c(1, 100),
  stoch = TRUE, num_runs = 100, search_range = c(0.01, 2))
}
\arguments{
\item{fit_data}{The incidence data to use for fitting.}

\item{spatial_data}{The spatial dataset to be fitted.}

\item{interval}{The interval on which the fit should be performed, in days (default is c(1,100) - i.e. the fit
will be performed on the first 100 days of the epidemic).}

\item{stoch}{Logical. If TRUE (default), fitting will be performed using the median of x stochastic runs. If
FALSE, fitting will be performed using the deterministic output.}

\item{num_runs}{Number of stochastic runs to extract the median incidence for one beta value (default is 100).
Higher values will be longer to run, but yield more accurate results. (only considered if
stoch = TRUE)}

\item{search_range}{Search range for the fitted value of the multiplier (default is c(0.01,2)).}
}
\value{
Returns the fitted value of the multiplier.
}
\description{
Adjusts a multiplier value (applied to beta and sigma to preserve R0) to fit the incidence of one
             resolution onto another.
}
\details{
The fitting is performed by assuming the fitted incidence belongs to a Poisson distribution with the
         expected values being the values from fit_data. Consequently, the values from fit_data must be integers.
}
\examples{

#Create a high resolution spatial dataset:
htest_data = raster(nrow=20, ncol=20, xmn=1, xmx=100000, ymn=1, ymx=100000)
values(htest_data) = runif(400, 1, 1000)

#Calculate the median incidence for the high resolution data:
prep_simulation(htest_data)
results_high = run_multi_stoch(100, htest_data, expanded_D, contact_mat, beta, t_max=100)
results_high = round(results_high$Median)


#Create a low resolution spatial dataset (4 times less areas than htest_data):
ltest_data = aggregate(htest_data, fact=2, fun=sum)

#Unlike fit_beta, here you need to run prep_simulation first for beta and sigma to transfer inside the function:
prep_simulation(ltest_data)

#Fit low resolution on high resolution:
fitted_mult = fit_mult(results_high, ltest_data, beta=beta, interval=c(1,100))

}
